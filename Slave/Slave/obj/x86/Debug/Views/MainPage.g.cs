#pragma checksum "C:\Users\Jervis\OneDrive\HotelAirConditionerControlSys_MVVM_UWP\Slave\Slave\Views\MainPage.xaml" "{406ea660-64cf-4c82-b6f0-42d48172a799}" "EF865589F8C59902384A104D18E3BBBA"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Slave.Views
{
    partial class MainPage : 
        global::Windows.UI.Xaml.Controls.Page, 
        global::Windows.UI.Xaml.Markup.IComponentConnector,
        global::Windows.UI.Xaml.Markup.IComponentConnector2
    {
        internal class XamlBindingSetters
        {
            public static void Set_Windows_UI_Xaml_Controls_TextBlock_Text(global::Windows.UI.Xaml.Controls.TextBlock obj, global::System.String value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = targetNullValue;
                }
                obj.Text = value ?? global::System.String.Empty;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_RangeBase_Value(global::Windows.UI.Xaml.Controls.Primitives.RangeBase obj, global::System.Double value)
            {
                obj.Value = value;
            }
            public static void Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(global::Windows.UI.Xaml.Controls.Primitives.ButtonBase obj, global::System.Windows.Input.ICommand value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::System.Windows.Input.ICommand) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Windows.Input.ICommand), targetNullValue);
                }
                obj.Command = value;
            }
        };

        private class MainPage_obj1_Bindings :
            global::Windows.UI.Xaml.Markup.IComponentConnector,
            IMainPage_Bindings
        {
            private global::Slave.Views.MainPage dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);
            private global::Windows.UI.Xaml.ResourceDictionary localResources;
            private global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement> converterLookupRoot;

            // Fields for each control that has bindings.
            private global::Windows.UI.Xaml.Controls.TextBlock obj8;
            private global::Windows.UI.Xaml.Controls.TextBlock obj10;
            private global::Windows.UI.Xaml.Controls.Slider obj12;
            private global::Windows.UI.Xaml.Controls.Slider obj13;
            private global::Windows.UI.Xaml.Controls.TextBlock obj15;
            private global::Windows.UI.Xaml.Controls.TextBlock obj17;
            private global::Windows.UI.Xaml.Controls.TextBlock obj20;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj21;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj22;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj23;
            private global::Windows.UI.Xaml.Controls.AppBarButton obj24;

            private MainPage_obj1_BindingsTracking bindingsTracking;

            public MainPage_obj1_Bindings()
            {
                this.bindingsTracking = new MainPage_obj1_BindingsTracking(this);
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 8:
                        this.obj8 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        (this.obj8).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.VM.Slave.CTemp = (global::System.Double)this.LookupConverter("StringFormatConverter").ConvertBack((this.obj8).Text, typeof(global::System.Double), null, null);
                                }
                            });
                        break;
                    case 10:
                        this.obj10 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        (this.obj10).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.VM.Slave.DTemp = (global::System.Double)this.LookupConverter("StringFormatConverter").ConvertBack((this.obj10).Text, typeof(global::System.Double), null, null);
                                }
                            });
                        break;
                    case 12:
                        this.obj12 = (global::Windows.UI.Xaml.Controls.Slider)target;
                        break;
                    case 13:
                        this.obj13 = (global::Windows.UI.Xaml.Controls.Slider)target;
                        ((global::Windows.UI.Xaml.Controls.Slider)target).PointerCaptureLost += (global::System.Object param0, global::Windows.UI.Xaml.Input.PointerRoutedEventArgs param1) =>
                        {
                        this.dataRoot.VM.ChangeDTempCommand();
                        };
                        (this.obj13).RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.Primitives.RangeBase.ValueProperty,
                            (global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop) =>
                            {
                                if (this.initialized)
                                {
                                    // Update Two Way binding
                                    this.dataRoot.VM.SliderValueDTemp = (this.obj13).Value;
                                }
                            });
                        break;
                    case 15:
                        this.obj15 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 17:
                        this.obj17 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 20:
                        this.obj20 = (global::Windows.UI.Xaml.Controls.TextBlock)target;
                        break;
                    case 21:
                        this.obj21 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        break;
                    case 22:
                        this.obj22 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Click += (global::System.Object param0, global::Windows.UI.Xaml.RoutedEventArgs param1) =>
                        {
                        this.dataRoot.VM.GotoSettings();
                        };
                        break;
                    case 23:
                        this.obj23 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Click += (global::System.Object param0, global::Windows.UI.Xaml.RoutedEventArgs param1) =>
                        {
                        this.dataRoot.VM.GotoPrivacy();
                        };
                        break;
                    case 24:
                        this.obj24 = (global::Windows.UI.Xaml.Controls.AppBarButton)target;
                        ((global::Windows.UI.Xaml.Controls.AppBarButton)target).Click += (global::System.Object param0, global::Windows.UI.Xaml.RoutedEventArgs param1) =>
                        {
                        this.dataRoot.VM.GotoAbout();
                        };
                        break;
                    default:
                        break;
                }
            }

            // IMainPage_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.initialized = false;
            }

            // MainPage_obj1_Bindings

            public void SetDataRoot(global::Slave.Views.MainPage newDataRoot)
            {
                this.bindingsTracking.ReleaseAllListeners();
                this.dataRoot = newDataRoot;
            }

            public void Loading(global::Windows.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }
            public void SetConverterLookupRoot(global::Windows.UI.Xaml.FrameworkElement rootElement)
            {
                this.converterLookupRoot = new global::System.WeakReference<global::Windows.UI.Xaml.FrameworkElement>(rootElement);
            }

            public global::Windows.UI.Xaml.Data.IValueConverter LookupConverter(string key)
            {
                if (this.localResources == null)
                {
                    global::Windows.UI.Xaml.FrameworkElement rootElement;
                    this.converterLookupRoot.TryGetTarget(out rootElement);
                    this.localResources = rootElement.Resources;
                    this.converterLookupRoot = null;
                }
                return (global::Windows.UI.Xaml.Data.IValueConverter) (this.localResources.ContainsKey(key) ? this.localResources[key] : global::Windows.UI.Xaml.Application.Current.Resources[key]);
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::Slave.Views.MainPage obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_VM(obj.VM, phase);
                        this.Update_textBlock(obj.textBlock, phase);
                    }
                }
            }
            private void Update_VM(global::Slave.ViewModels.MainPageViewModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_VM(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_VM_Slave(obj.Slave, phase);
                        this.Update_VM_SliderValueDTemp(obj.SliderValueDTemp, phase);
                    }
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_VM_ChangeSpeedCommand(obj.ChangeSpeedCommand, phase);
                    }
                }
            }
            private void Update_VM_Slave(global::Slave.Models.SlaveModel obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_VM_Slave(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_VM_Slave_CTemp(obj.CTemp, phase);
                        this.Update_VM_Slave_DTemp(obj.DTemp, phase);
                        this.Update_VM_Slave_Speed(obj.Speed, phase);
                        this.Update_VM_Slave_WorkMode(obj.WorkMode, phase);
                        this.Update_VM_Slave_Cost(obj.Cost, phase);
                    }
                }
            }
            private void Update_VM_Slave_CTemp(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj8, (global::System.String)this.LookupConverter("StringFormatConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_VM_Slave_DTemp(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj10, (global::System.String)this.LookupConverter("StringFormatConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_textBlock(global::Windows.UI.Xaml.Controls.TextBlock obj, int phase)
            {
                this.bindingsTracking.UpdateChildListeners_textBlock(obj);
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | DATA_CHANGED | (1 << 0))) != 0)
                    {
                        this.Update_textBlock_Text(obj.Text, phase);
                    }
                }
            }
            private void Update_textBlock_Text(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_RangeBase_Value(this.obj12, (global::System.Double) global::Windows.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::System.Double), obj));
                }
            }
            private void Update_VM_SliderValueDTemp(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_RangeBase_Value(this.obj13, obj);
                }
            }
            private void Update_VM_Slave_Speed(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj15, obj, null);
                }
            }
            private void Update_VM_Slave_WorkMode(global::System.String obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj17, obj, null);
                }
            }
            private void Update_VM_Slave_Cost(global::System.Double obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED | DATA_CHANGED)) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_TextBlock_Text(this.obj20, (global::System.String)this.LookupConverter("StringFormatConverter").Convert(obj, typeof(global::System.String), null, null), null);
                }
            }
            private void Update_VM_ChangeSpeedCommand(global::Template10.Mvvm.DelegateCommand obj, int phase)
            {
                if((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    XamlBindingSetters.Set_Windows_UI_Xaml_Controls_Primitives_ButtonBase_Command(this.obj21, obj, null);
                }
            }

            private class MainPage_obj1_BindingsTracking
            {
                global::System.WeakReference<MainPage_obj1_Bindings> WeakRefToBindingObj; 

                public MainPage_obj1_BindingsTracking(MainPage_obj1_Bindings obj)
                {
                    WeakRefToBindingObj = new global::System.WeakReference<MainPage_obj1_Bindings>(obj);
                }

                public void ReleaseAllListeners()
                {
                    UpdateChildListeners_VM(null);
                    UpdateChildListeners_VM_Slave(null);
                    UpdateChildListeners_textBlock(null);
                }

                public void PropertyChanged_VM(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Slave.ViewModels.MainPageViewModel obj = sender as global::Slave.ViewModels.MainPageViewModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_VM_Slave(obj.Slave, DATA_CHANGED);
                                    bindings.Update_VM_SliderValueDTemp(obj.SliderValueDTemp, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "Slave":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_VM_Slave(obj.Slave, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "SliderValueDTemp":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_VM_SliderValueDTemp(obj.SliderValueDTemp, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Slave.ViewModels.MainPageViewModel cache_VM = null;
                public void UpdateChildListeners_VM(global::Slave.ViewModels.MainPageViewModel obj)
                {
                    if (obj != cache_VM)
                    {
                        if (cache_VM != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_VM).PropertyChanged -= PropertyChanged_VM;
                            cache_VM = null;
                        }
                        if (obj != null)
                        {
                            cache_VM = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_VM;
                        }
                    }
                }
                public void PropertyChanged_VM_Slave(object sender, global::System.ComponentModel.PropertyChangedEventArgs e)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        string propName = e.PropertyName;
                        global::Slave.Models.SlaveModel obj = sender as global::Slave.Models.SlaveModel;
                        if (global::System.String.IsNullOrEmpty(propName))
                        {
                            if (obj != null)
                            {
                                    bindings.Update_VM_Slave_CTemp(obj.CTemp, DATA_CHANGED);
                                    bindings.Update_VM_Slave_DTemp(obj.DTemp, DATA_CHANGED);
                                    bindings.Update_VM_Slave_Speed(obj.Speed, DATA_CHANGED);
                                    bindings.Update_VM_Slave_WorkMode(obj.WorkMode, DATA_CHANGED);
                                    bindings.Update_VM_Slave_Cost(obj.Cost, DATA_CHANGED);
                            }
                        }
                        else
                        {
                            switch (propName)
                            {
                                case "CTemp":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_VM_Slave_CTemp(obj.CTemp, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "DTemp":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_VM_Slave_DTemp(obj.DTemp, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Speed":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_VM_Slave_Speed(obj.Speed, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "WorkMode":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_VM_Slave_WorkMode(obj.WorkMode, DATA_CHANGED);
                                    }
                                    break;
                                }
                                case "Cost":
                                {
                                    if (obj != null)
                                    {
                                        bindings.Update_VM_Slave_Cost(obj.Cost, DATA_CHANGED);
                                    }
                                    break;
                                }
                                default:
                                    break;
                            }
                        }
                    }
                }
                private global::Slave.Models.SlaveModel cache_VM_Slave = null;
                public void UpdateChildListeners_VM_Slave(global::Slave.Models.SlaveModel obj)
                {
                    if (obj != cache_VM_Slave)
                    {
                        if (cache_VM_Slave != null)
                        {
                            ((global::System.ComponentModel.INotifyPropertyChanged)cache_VM_Slave).PropertyChanged -= PropertyChanged_VM_Slave;
                            cache_VM_Slave = null;
                        }
                        if (obj != null)
                        {
                            cache_VM_Slave = obj;
                            ((global::System.ComponentModel.INotifyPropertyChanged)obj).PropertyChanged += PropertyChanged_VM_Slave;
                        }
                    }
                }
                public void DependencyPropertyChanged_textBlock_Text(global::Windows.UI.Xaml.DependencyObject sender, global::Windows.UI.Xaml.DependencyProperty prop)
                {
                    MainPage_obj1_Bindings bindings;
                    if(WeakRefToBindingObj.TryGetTarget(out bindings))
                    {
                        global::Windows.UI.Xaml.Controls.TextBlock obj = sender as global::Windows.UI.Xaml.Controls.TextBlock;
        if (obj != null)
        {
            bindings.Update_textBlock_Text(obj.Text, DATA_CHANGED);
        }
                    }
                }
                private global::Windows.UI.Xaml.Controls.TextBlock cache_textBlock = null;
                private long tokenDPC_textBlock_Text = 0;
                public void UpdateChildListeners_textBlock(global::Windows.UI.Xaml.Controls.TextBlock obj)
                {
                    if (obj != cache_textBlock)
                    {
                        if (cache_textBlock != null)
                        {
                            cache_textBlock.UnregisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, tokenDPC_textBlock_Text);
                            cache_textBlock = null;
                        }
                        if (obj != null)
                        {
                            cache_textBlock = obj;
                            tokenDPC_textBlock_Text = obj.RegisterPropertyChangedCallback(global::Windows.UI.Xaml.Controls.TextBlock.TextProperty, DependencyPropertyChanged_textBlock_Text);
                        }
                    }
                }
            }
        }
        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2:
                {
                    this.AdaptiveVisualStateGroup = (global::Windows.UI.Xaml.VisualStateGroup)(target);
                }
                break;
            case 3:
                {
                    this.VisualStateNarrow = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 4:
                {
                    this.VisualStateNormal = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 5:
                {
                    this.VisualStateWide = (global::Windows.UI.Xaml.VisualState)(target);
                }
                break;
            case 6:
                {
                    this.pageHeader = (global::Template10.Controls.PageHeader)(target);
                }
                break;
            case 7:
                {
                    this.textBlock3 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 8:
                {
                    this.textBlock = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 9:
                {
                    this.textBlock2 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 10:
                {
                    this.textBlock_Copy = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 11:
                {
                    this.textBlock2_Copy = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 12:
                {
                    this.slider = (global::Windows.UI.Xaml.Controls.Slider)(target);
                }
                break;
            case 13:
                {
                    this.slider_Copy = (global::Windows.UI.Xaml.Controls.Slider)(target);
                }
                break;
            case 14:
                {
                    this.textBlock1 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 15:
                {
                    this.textBlock1_Copy = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 16:
                {
                    this.textBlock1_Copy1 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 17:
                {
                    this.textBlock1_Copy2 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 18:
                {
                    this.textBlock1_Copy5 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 19:
                {
                    this.textBlock1_Copy6 = (global::Windows.UI.Xaml.Controls.TextBlock)(target);
                }
                break;
            case 22:
                {
                    global::Windows.UI.Xaml.Controls.AppBarButton element22 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                }
                break;
            case 23:
                {
                    global::Windows.UI.Xaml.Controls.AppBarButton element23 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                }
                break;
            case 24:
                {
                    global::Windows.UI.Xaml.Controls.AppBarButton element24 = (global::Windows.UI.Xaml.Controls.AppBarButton)(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Windows.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Windows.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1:
                {
                    global::Windows.UI.Xaml.Controls.Page element1 = (global::Windows.UI.Xaml.Controls.Page)target;
                    MainPage_obj1_Bindings bindings = new MainPage_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    bindings.SetConverterLookupRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                }
                break;
            }
            return returnValue;
        }
    }
}

